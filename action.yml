name: 'Code Review Bot'
description: 'Automatically request and post code review comments on pull requests'
inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  career-support-api-token:
    description: 'API token for CareerSupport service'
    required: true
  repository-name:
    description: 'Name of the GitHub repository'
    required: true
  pr-number:
    description: 'Pull request number'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Get code review comments and post to PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          try {
            const response = await fetch('https://careersupport.serveblog.net/api/code-review', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-API-TOKEN': '${{ inputs.career-support-api-token }}'
              },
              body: JSON.stringify({
                githubToken: '${{ inputs.github-token }}',
                repositoryName: '${{ inputs.repository-name }}',
                prNumber: ${{ inputs.pr-number }}
              })
            });

            console.log('API Response Status:', response.status);
            console.log('API Response Headers:', JSON.stringify(Object.fromEntries(response.headers), null, 2));

            const responseData = await response.json();
            console.log('API Response Body:', JSON.stringify(responseData, null, 2));

            if (!response.ok) {
              throw new Error(`API request failed with status ${response.status}`);
            }

            if (!responseData.data || !Array.isArray(responseData.data)) {
              console.error('Invalid response format');
              return;
            }

            for (const item of responseData.data) {
              if (item.fileName && item.reviewContent && item.reviewContent.trim() !== '') {
                const body = item.reviewContent;
                
                try {
                  await github.rest.issues.createComment({
                    issue_number: ${{ inputs.pr-number }},
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: body
                  });
                  console.log(`Comment posted successfully for file: ${item.fileName}`);
                } catch (error) {
                  console.error(`Error posting comment for file ${item.fileName}:`, error);
                }
              }
            }
          } catch (error) {
            console.error('Error:', error);
          }